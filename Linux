### Linux Notes: Basic to Advanced

#### 1. **Introduction to Linux**
- **What is Linux?** 
  - Open-source operating system based on Unix.
- **Key Features:**
  - Multiuser, multitasking, portability, security, and community support.


#### 2. **Basic Commands**
- **File and Directory Operations:**
  - `ls` - List directory contents.
  - `cd` - Change directory.
  - `pwd` - Print working directory.
  - `mkdir` - Create a directory.
  - `rmdir` - Remove an empty directory.
  - `rm` - Remove files or directories (use with caution).
  - `cp` - Copy files/directories.
  - `mv` - Move/rename files/directories.

- **Viewing and Editing Files:**
  - `cat` - Concatenate and display file contents.
  - `less` - View file content one screen at a time.
  - `nano`/`vim` - Text editors for creating/editing files.

---

#### 3. **Understanding Paths**
- **Absolute Path:** Full path from the root (e.g., `/home/user/file.txt`).
- **Relative Path:** Path relative to the current directory (e.g., `../file.txt`).

---

#### 4. **File Permissions and Ownership**
- **Understanding Permissions:**
  - `ls -l` - List files with permissions.
  - **Permissions:** Read (r), Write (w), Execute (x).
- **Changing Permissions:**
  - `chmod` - Change file mode (e.g., `chmod 755 file`).
- **Changing Ownership:**
  - `chown` - Change file owner (e.g., `chown user:group file`).

---

#### 5. **Links in Linux**
- **Symbolic Links:**
  - `ln -s target linkname` - Create a symbolic link.
- **Hard Links:**
  - `ln target linkname` - Create a hard link (same inode).
  
---

#### 6. **Process Management**
- **Viewing Processes:**
  - `ps` - Show current processes.
  - `top` - Display running processes in real-time.
- **Managing Processes:**
  - `kill` - Terminate a process (use PID).
  - `bg` - Background a process.
  - `fg` - Bring a process to the foreground.

---

#### 7. **Networking Commands**
- **Basic Networking:**
  - `ping` - Test network connectivity.
  - `ifconfig` - Display network interface configuration (use `ip` for newer versions).
  - `netstat` - Display network connections and statistics.
  - `scp` - Secure copy files between hosts.

---

#### 8. **Advanced Commands**
- **Searching and Finding:**
  - `grep` - Search text using patterns.
  - `find` - Search for files in a directory hierarchy.
  - `locate` - Find files by name quickly.

- **Archiving and Compression:**
  - `tar` - Archive files (e.g., `tar -cvf archive.tar dir/`).
  - `gzip`/`gunzip` - Compress and decompress files.

---

#### 9. **Scripting Basics**
- **Shell Scripting:**
  - Create a script: `nano script.sh`.
  - Make executable: `chmod +x script.sh`.
  - Run a script: `./script.sh`.

---

#### 10. **System Administration**
- **User Management:**
  - `useradd` - Add a new user.
  - `passwd` - Change user password.
  - `usermod` - Modify user account.

- **Package Management:**
  - **Debian-based:** `apt-get` (e.g., `apt-get install package`).
  - **Red Hat-based:** `yum` or `dnf` (e.g., `yum install package`).

---

#### 11. **File System Hierarchy**
- **Understanding the Linux File System:**
  - `/` - Root directory.
  - `/home` - User home directories.
  - `/etc` - Configuration files.
  - `/var` - Variable files like logs.
  - `/tmp` - Temporary files.

---

#### 12. **Environment Variables**
- **Using Environment Variables:**
  - `echo $VARIABLE` - Display a variable.
  - `export VARIABLE=value` - Set a new variable.
- **Common Environment Variables:**
  - `PATH`, `HOME`, `USER`, `SHELL`.

---

#### 13. **Network Configuration**
- **Configuring Network Interfaces:**
  - `/etc/network/interfaces` (Debian-based).
  - `nmcli` - Command-line tool for managing NetworkManager.

---

#### 14. **Cron Jobs and Scheduling**
- **Automating Tasks:**
  - `crontab -e` - Edit userâ€™s cron jobs.
  - Syntax: `* * * * * command` (minute, hour, day, month, weekday).

---

#### 15. **System Logs**
- **Viewing and Managing Logs:**
  - `/var/log/` - Directory containing log files.
  - `tail -f /var/log/syslog` - View real-time log updates.

---

#### 16. **Security and Firewall**
- **Basic Security Practices:**
  - Keep software updated.
  - Use strong passwords.
- **Firewall Configuration:**
  - `iptables` or `ufw` (Uncomplicated Firewall) for managing firewall rules.

---

#### 17. **Virtualization and Containers**
- **Understanding Virtualization:**
  - Tools like `KVM`, `VirtualBox`.
- **Containers:**
  - Introduction to Docker and basic commands like `docker run`, `docker ps`.

---

#### 18. **Package Management Deep Dive**
- **Understanding Dependency Management:**
  - How package managers handle software dependencies.
- **Repositories:**
  - Adding and managing repositories.

---

#### 19. **Backup and Recovery**
- **Backup Strategies:**
  - Using tools like `rsync` for backups.
- **Data Recovery Basics:**
  - `testdisk` and `photorec` for recovering lost files.

---

#### 20. **Advanced Shell Features**
- **Command History:**
  - `history` - View command history.
  - `!!` - Execute last command.
- **Pipes and Redirection:**
  - `|` - Pipe output to another command.
  - `>` - Redirect output to a file.

---

### Tips for Study:
- Practice commands in a terminal.
- Use online resources and Linux documentation (man pages).
- Build small projects or scripts to reinforce learning.
